<?php

/**
 * @file
 * Implements the SoftBank Payment Service for use with Drupal Commerce.
 */

// TODO: Add unit tests to validate API functionality.

define('COMMERCE_SBPAYMENT_BASE_URL', 'commerce/sbpayment');
define('COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE', 'commerce_sbpayment');

/**
 * Implements hook_help().
 */
function commerce_sbpayment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_sbpayment':
      $output = '<h2>' . t('Commerce SoftBank Payment Service') . '</h2>';
      $output .= '<p>' . t('Implements the SoftBank Payment Service for use with Drupal Commerce') . '<p>';

      return $output;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sbpayment_commerce_payment_method_info() {
  $payment_methods = array();

  // Add a new payment method for each available SoftBank payment service.
  foreach (commerce_sbpayment_services() as $machine_name => $sbpayment_service) {
    // Build the commerce payment method machine name.
    $sbpayment_service_method_name = sprintf('%s_%s', COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE, $machine_name);

    // Determine the service name.
    $sbpayment_service_name = !empty($sbpayment_service['name']) ? $sbpayment_service['name'] : $machine_name;

    $payment_methods[$sbpayment_service_method_name] = array(
      'file' => 'includes/' . $sbpayment_service_method_name . '.payment.inc',
      'title' => t('Commerce SoftBank Payment Service: @service_name', array('@service_name' => $sbpayment_service_name)),
      'description' => t('Redirect users to submit payments through the SoftBank Payment Service: @service_name.', array('@service_name' => $sbpayment_service_name)),
      'active' => (commerce_default_currency() === 'JPY'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    );
  }

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_sbpayment_menu() {
  $items = array();

  $items[COMMERCE_SBPAYMENT_BASE_URL . '/%/%commerce_order/%'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_sbpayment.menu.inc',
    'page callback' => 'commerce_sbpayment_notification_controller',
    'delivery callback' => 'commerce_sbpayment_deliver',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Light weight menu delivery callback.
 *
 * Intended for use with payment notification routes.
 *
 * @param string $response
 *   Response from callback.
 *
 * @see commerce_sbpayment_notification_controller()
 * @see drupal_deliver_html_page()
 */
function commerce_sbpayment_deliver($response) {
  // Default Drupal delivery callback contains a lot of heavy logic that we
  // don't need. So we are just returning the raw callback response.
  print $response;
}

/**
 * Get the list of available SoftBank services.
 *
 * @return array
 *   Array of SoftBank services keyed by a unique machine name.
 */
function commerce_sbpayment_services() {
  // TODO: The XML API can be implemented here if required in future.
  return array(
    (string) new \Commerce\SBPayment\Service\LinkType() => array(
      'name' => t('Link Type'),
      'class' => \Commerce\SBPayment\Service\LinkType::class,
    ),
  );
}

/**
 * Get an instantiated payment service object.
 *
 * @param string $machine_name
 *   Machine name of the service to instantiate.
 *
 * @return mixed
 *   An instantiated service object or FALSE if invalid.
 */
function commerce_sbpayment_get_service_object($machine_name) {
  $sbpayment_service = commerce_sbpayment_services()[$machine_name];

  // Check we have some service info.
  if (empty($sbpayment_service)) {
    return FALSE;
  }

  // Check if the defined class exists and extends the correct abstract class.
  if (!class_exists($sbpayment_service['class']) || !is_subclass_of($sbpayment_service['class'], \Commerce\SBPayment\SBPayment::class)) {
    return FALSE;
  }

  // Instantiate the service.
  try {
    $sbpayment_service_object = new $sbpayment_service['class']();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_sbpayment', $e);
    return FALSE;
  }

  return $sbpayment_service_object;
}

/**
 * Creates/Updates a commerce payment transaction based on SoftBank data.
 *
 * @param array $payment_method
 *   Payment method information array.
 * @param Commerce\SBPayment\Response\ResponseInterface $sbpayment_response
 *   A SoftBank payment response object.
 * @param object $order
 *   A fully loaded commerce order object.
 *
 * @see commerce_payment_methods()
 */
function commerce_sbpayment_transaction($payment_method, \Commerce\SBPayment\Response\ResponseInterface $sbpayment_response, $order) {
  // Determine the status for this payment.
  if ($sbpayment_response->getRemoteStatus() === $sbpayment_response::RESPONSE_OK) {
    $payment_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    // Assume it's failed otherwise.
    $payment_status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  // Build an array of conditions to check if a matching transaction
  // already exists.
  $conditions = array(
    'order_id' => $order->order_id,
    'instance_id' => $payment_method['instance_id'],
    'payment_method' => COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE,
    'status' => $payment_status,
    'remote_status' => $sbpayment_response->getRemoteStatus(),
    'remote_id' => $sbpayment_response->getRemoteId(),
  );

  // Check for an existing transaction with these conditions.
  $transactions = commerce_payment_transaction_load_multiple(array(), $conditions);
  $transaction = reset($transactions);

  // Create a new transaction if required.
  if (empty($transaction)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  }

  // Set the transaction data.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->status = $payment_status;
  $transaction->remote_status = $sbpayment_response->getRemoteStatus();
  $transaction->remote_id = $sbpayment_response->getRemoteId();
  $transaction->payload = !empty($sbpayment_response->toArray()) ? $sbpayment_response->toArray() : array();

  // Build the transaction message.
  $transaction->message = 'Payment status: @status. SoftBank Status: @remote_status. SoftBank Tracking ID: @remote_id.';
  $transaction->message_variables = array(
    '@status' => $payment_status,
    '@remote_status' => $sbpayment_response->getRemoteStatus(),
    '@remote_id' => $sbpayment_response->getRemoteId(),
  );

  commerce_payment_transaction_save($transaction);
}

/**
 * Get the available gateway mode options for use with the Drupal form API.
 *
 * @return string[]
 *   Array of gateway modes keyed by machine name.
 */
function _commerce_sbpayment_mode_options() {
  return array(
    \Commerce\SBPayment\SBPayment::API_MODE_TEST => t('Test'),
    \Commerce\SBPayment\SBPayment::API_MODE_LIVE => t('Live'),
  );
}

/**
 * Get a list of SoftBank payment methods for use with the Drupal form API.
 *
 * @param string[] $payment_methods
 *   List of the available payment method machine names as defined
 *   by Commerce\SBPayment\Payment\Methods.
 *
 * @return string[]
 *   Array of payment method names keyed by machine name.
 */
function _commerce_sbpayment_payment_method_options($payment_methods) {
  // Build an array of payment method names keyed by the machine name. Filtering
  // out any invalid methods.
  $payment_method_options = array_filter(array_map(function ($payment_method) {
    return \Commerce\SBPayment\Payment\Methods::getPaymentMethodByMachineName($payment_method);
  }, $payment_methods));

  // Allow other modules to alter the list of payment methods.
  drupal_alter('commerce_sbpayment_payment_method_options', $payment_method_options);

  return $payment_method_options;
}

/**
 * Prepare an order number for use in a SoftBank request.
 *
 * Each request must have a unique order number, even if the user canceled and
 * wants to try payment again.
 *
 * @param object $order
 *   A fully loaded Drupal commerce order.
 *
 * @return string
 *   The prepared order number.
 */
function _commerce_sbpayment_prepare_order_number($order) {
  $order_number = $order->order_number;

  // Append the number of payment attempts.
  if (!empty($order->data['softbank']['payment_attempts'])) {
    $order_number .= '__' . $order->data['softbank']['payment_attempts'];
  }

  return $order_number;
}
