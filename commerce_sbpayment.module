<?php

/**
 * @file
 * Implements the SoftBank Payment Service for use with Drupal Commerce.
 */

// TODO: Add unit tests to validate API functionality.

define('COMMERCE_SBPAYMENT_BASE_URL', 'commerce/sbpayment');
define('COMMERCE_SBPAYMENT_PAYMENT_METHOD', 'commerce_sbpayment');

/**
 * Implements hook_help().
 */
function commerce_sbpayment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_sbpayment':
      $output = '<h2>' . t('Commerce SoftBank Payment Service') . '</h2>';
      $output .= '<p>' . t('Implements the SoftBank Payment Service for use with Drupal Commerce') . '<p>';

      return $output;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sbpayment_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods[COMMERCE_SBPAYMENT_PAYMENT_METHOD] = array(
    'file' => 'includes/commerce_sbpayment.payment.inc',
    'title' => t('Commerce SoftBank Payment Service'),
    'description' => t('Redirect users to submit payments through the SoftBank Payment Service.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

// TODO: Implement menu hook for CGI notification.

// TODO: Implement custom delivery callback for CGI notification.

/**
 * Get an array of default settings for the SoftBank Payment Service.
 *
 * @return array
 *   Array of default values keyed by field name.
 */
function commerce_sbpayment_default_settings() {
  return array(
    'mode' => \Commerce\SBPayment\SBPayment::API_MODE_TEST,
    'pay_methods' => array(),
    'merchant_id' => '',
    'service_id' => '',
    'pay_type' => 0,
    'auto_charge_type' => 0,
    'service_type' => 0,
    'hash_key' => '',
  );
}

/**
 * Get the available gateway modes.
 *
 * @return string[]
 *   Array of gateway modes keyed by machine name.
 */
function commerce_sbpayment_mode_options() {
  return array(
    \Commerce\SBPayment\SBPayment::API_MODE_TEST => t('Test'),
    \Commerce\SBPayment\SBPayment::API_MODE_LIVE => t('Live'),
  );
}

// TODO: Add helper for saving transactions.
