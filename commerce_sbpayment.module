<?php

/**
 * @file
 * Implements the SoftBank Payment Service for use with Drupal Commerce.
 */

use Commerce\SBPayment\SBPayment;
use Commerce\SBPayment\Service\LinkType;
use Commerce\SBPayment\Response\Response;
use Commerce\SBPayment\Payment\Methods;

// TODO: Add unit tests to validate API functionality.

define('COMMERCE_SBPAYMENT_BASE_URL', 'commerce/sbpayment');
define('COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE', 'commerce_sbpayment');

/**
 * Implements hook_help().
 */
function commerce_sbpayment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_sbpayment':
      $output = '<h2>' . t('Commerce SoftBank Payment Service') . '</h2>';
      $output .= '<p>' . t('Implements the SoftBank Payment Service for use with Drupal Commerce') . '<p>';

      return $output;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sbpayment_commerce_payment_method_info() {
  $payment_methods = array();

  // Add a new payment method for each available SoftBank payment service.
  foreach (commerce_sbpayment_services() as $machine_name => $sbpayment_service) {
    // Build the commerce payment method machine name.
    $sbpayment_service_method_name = sprintf('%s_%s', COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE, $machine_name);

    // Determine the service name.
    $sbpayment_service_name = !empty($sbpayment_service['name']) ? $sbpayment_service['name'] : $machine_name;

    $payment_methods[$sbpayment_service_method_name] = array(
      'file' => 'includes/' . $sbpayment_service_method_name . '.payment.inc',
      'title' => t('Commerce SoftBank Payment Service: @service_name', array('@service_name' => $sbpayment_service_name)),
      'description' => t('Redirect users to submit payments through the SoftBank Payment Service: @service_name.', array('@service_name' => $sbpayment_service_name)),
      'active' => (commerce_default_currency() === 'JPY'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    );
  }

  return $payment_methods;
}

/**
 * Implements hook_menu().
 */
function commerce_sbpayment_menu() {
  $items = array();

  $items[COMMERCE_SBPAYMENT_BASE_URL . '/%/%/%'] = array(
    'type' => MENU_CALLBACK,
    'file' => 'includes/commerce_sbpayment.menu.inc',
    'page callback' => 'commerce_sbpayment_notification_controller',
    'delivery callback' => 'commerce_sbpayment_deliver',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Light weight menu delivery callback.
 *
 * Intended for use with payment notification routes.
 *
 * @param string $response
 *   Response from callback.
 *
 * @see commerce_sbpayment_notification_controller()
 * @see drupal_deliver_html_page()
 */
function commerce_sbpayment_deliver($response) {
  // Default Drupal delivery callback contains a lot of heavy logic that we
  // don't need. So we are just returning the raw callback response.
  print $response;
}

/**
 * Get the list of available SoftBank services.
 *
 * @return array
 *   Array of SoftBank services keyed by a unique machine name.
 */
function commerce_sbpayment_services() {
  // TODO: The XML API can be implemented here if required in future.
  return array(
    (string) new LinkType() => array(
      'name' => t('Link Type'),
      'class' => LinkType::class,
    ),
  );
}

/**
 * Get an instantiated payment service object.
 *
 * @param string $machine_name
 *   Machine name of the service to instantiate.
 *
 * @return mixed
 *   An instantiated service object or FALSE if invalid.
 */
function commerce_sbpayment_get_service_object($machine_name) {
  $sbpayment_service = commerce_sbpayment_services()[$machine_name];

  // Check we have some service info.
  if (empty($sbpayment_service)) {
    return FALSE;
  }

  // Check if the defined class exists and extends the correct abstract class.
  if (!class_exists($sbpayment_service['class']) || !is_subclass_of($sbpayment_service['class'], SBPayment::class)) {
    return FALSE;
  }

  // Instantiate the service.
  try {
    $sbpayment_service_object = new $sbpayment_service['class']();
  }
  catch (Exception $e) {
    watchdog_exception('commerce_sbpayment', $e);
    return FALSE;
  }

  return $sbpayment_service_object;
}

/**
 * Generate a payment redirect form for a SoftBank payment service.
 *
 * @param \Commerce\SBPayment\SBPayment $sbpayment_service
 *   The payment service object with payment data set.
 * @param object $order
 *   A fully loaded commerce order object.
 * @param bool $debug
 *   Should debug information on the payment request be logged?
 *
 * @return array
 *   A renderable Drupal form array.
 */
function commerce_sbpayment_service_order_form(SBPayment $sbpayment_service, $order, $debug = FALSE) {
  $form = array();

  // Set the SoftBank service URL.
  $form['#action'] = $sbpayment_service->getServiceUrl();

  // Get the payment data from the service.
  $payment_data = $sbpayment_service->getPaymentData();

  // Allow other modules to alter the payment data.
  $order_data = clone $order;
  $sbpayment_service_name = (string) $sbpayment_service;
  drupal_alter('commerce_sbpayment_service_order_form_data', $payment_data, $sbpayment_service_name, $order_data);

  // Set the payment data fields.
  foreach ($payment_data as $name => $value) {
    $form[$name] = array('#type' => 'hidden', '#value' => $value);
  }

  // Set the product fields.
  $i = 1;
  foreach ($sbpayment_service->getProducts() as $product) {
    foreach ($product->toArray() as $product_field => $product_data) {
      $form[$product_field . '__' . $i] = array(
        '#type' => 'hidden',
        '#value' => $product_data,
        '#pre_render' => array('commerce_sbpayment_service_product_pre_render'),
      );
    }
    ++$i;
  }

  // Add the request data and limit fields. They have to appear after the
  // product detail fields.
  $form['request_date'] = array(
    '#type' => 'hidden',
    '#value' => $sbpayment_service->getRequestDate(),
  );
  $form['limit_second'] = array(
    '#type' => 'hidden',
    '#value' => $sbpayment_service->getLimitSecond(),
  );

  // Add the checksum value.
  $form['sps_hashcode'] = array(
    '#type' => 'hidden',
    '#value' => $sbpayment_service->getChecksum(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to SoftBank'),
  );

  $form['#pre_render'][] = 'commerce_sbpayment_service_order_form_pre_render';

  // Log the debug data if required.
  if ($debug === TRUE) {
    watchdog('commerce_sbpayment', 'Payment request debug: <pre>!data</pre>', array(
      '!data' => var_export($form, TRUE),
    ));
  }

  return $form;
}

/**
 * Form element pre render callback.
 *
 * Tweak the name attribute of SoftBank product fields.
 *
 * @param array $element
 *   Product form field element.
 *
 * @return array
 *   Tweakedd product form field element.
 */
function commerce_sbpayment_service_product_pre_render($element) {
  // Remove the index from the element name. Workaround for limitation of how
  // Drupal form arrays are built (no duplicate field names).
  $element_name = explode('__', $element['#name']);
  $element['#name'] = $element_name[0];

  return $element;
}

/**
 * Form pre-render callback.
 *
 * Remove Drupal fields from a form (such as "form_token", "form_id" etc).
 * This needs to be done since SoftBank will generate a signature from submitted
 * data and will expect only those fields which described in API. Any other
 * data will lead to wrong signature of payment request.
 */
function commerce_sbpayment_service_order_form_pre_render($form) {
  unset($form['form_build_id']);
  unset($form['form_id']);

  return $form;
}

/**
 * Creates/Updates a commerce payment transaction based on SoftBank data.
 *
 * @param array $payment_method
 *   Payment method information array.
 * @param Response $sbpayment_response
 *   A SoftBank payment response object.
 * @param object $order
 *   A fully loaded commerce order object.
 *
 * @see commerce_payment_methods()
 */
function commerce_sbpayment_transaction($payment_method, Response $sbpayment_response, $order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the status for this payment.
  if ($sbpayment_response->getRemoteStatus() === $sbpayment_response::RESPONSE_OK) {
    $payment_status = COMMERCE_PAYMENT_STATUS_SUCCESS;
  }
  else {
    // Assume it's failed otherwise.
    $payment_status = COMMERCE_PAYMENT_STATUS_FAILURE;
  }

  // Get the remote status and ID.
  $remote_status = $sbpayment_response->getRemoteStatus();
  $remote_id = $sbpayment_response->getRemoteId();

  // Build an array of conditions to check if a matching transaction
  // already exists.
  $conditions = array(
    'order_id' => $order->order_id,
    'instance_id' => $payment_method['instance_id'],
    'payment_method' => $payment_method['method_id'],
    'status' => $payment_status,
    'remote_status' => $remote_status,
    'remote_id' => $remote_id,
  );

  // Check for an existing transaction with these conditions.
  $transactions = commerce_payment_transaction_load_multiple(array(), $conditions);
  $transaction = reset($transactions);

  // Create a new transaction if required.
  if (empty($transaction)) {
    $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  }

  // Set the transaction data.
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->status = $payment_status;
  $transaction->remote_status = $remote_status;
  $transaction->remote_id = $remote_id;
  $transaction->amount = (int) $order_wrapper->commerce_order_total->amount->value();
  $transaction->currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  $transaction->payload = !empty($sbpayment_response->toArray()) ? $sbpayment_response->toArray() : array();

  // Build the transaction message.
  $transaction->message = 'Payment status: @status. SoftBank status: @remote_status. SoftBank tracking ID: @remote_id.';
  $transaction->message_variables = array(
    '@status' => $payment_status,
    '@remote_status' => !empty($remote_status) ? $remote_status : 'missing',
    '@remote_id' => !empty($remote_id) ? $remote_id : 'missing',
  );

  commerce_payment_transaction_save($transaction);
}

/**
 * Get the available gateway mode options for use with the Drupal form API.
 *
 * @return string[]
 *   Array of gateway modes keyed by machine name.
 */
function _commerce_sbpayment_mode_options() {
  return array(
    SBPayment::API_MODE_TEST => t('Test'),
    SBPayment::API_MODE_LIVE => t('Live'),
  );
}

/**
 * Get a list of SoftBank payment methods for use with the Drupal form API.
 *
 * @param string[] $payment_methods
 *   List of the available payment method machine names as defined
 *   by Commerce\SBPayment\Payment\Methods.
 *
 * @return string[]
 *   Array of payment method names keyed by machine name.
 */
function _commerce_sbpayment_payment_method_options($payment_methods) {
  // Build an array of payment method names keyed by the machine name. Filtering
  // out any invalid methods.
  $payment_method_options = array_filter(array_map(function ($payment_method) {
    return Methods::getPaymentMethodByMachineName($payment_method);
  }, $payment_methods));

  // Allow other modules to alter the list of payment methods.
  drupal_alter('commerce_sbpayment_payment_method_options', $payment_method_options);

  return $payment_method_options;
}

/**
 * Prepare an order number for use in a SoftBank request.
 *
 * Each request must have a unique order number, even if the user canceled and
 * wants to try payment again.
 *
 * @param object $order
 *   A fully loaded Drupal commerce order.
 *
 * @return string
 *   The prepared order number.
 */
function _commerce_sbpayment_prepare_order_number($order) {
  $order_number = $order->order_number;

  // Append the number of payment attempts.
  if (!empty($order->data['softbank']['payment_attempts'])) {
    $order_number .= '__' . $order->data['softbank']['payment_attempts'];
  }

  return $order_number;
}
