<?php

/**
 * @file
 * Implements the SoftBank Payment Service for use with Drupal Commerce.
 */

// TODO: Implement hook_requirements to error if the default currency isnt JPY.

// TODO: Add unit tests to validate API functionality.

define('COMMERCE_SBPAYMENT_BASE_URL', 'commerce/sbpayment');
define('COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE', 'commerce_sbpayment');

/**
 * Implements hook_help().
 */
function commerce_sbpayment_help($path, $arg) {
  switch ($path) {
    case 'admin/help#commerce_sbpayment':
      $output = '<h2>' . t('Commerce SoftBank Payment Service') . '</h2>';
      $output .= '<p>' . t('Implements the SoftBank Payment Service for use with Drupal Commerce') . '<p>';

      return $output;
  }
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_sbpayment_commerce_payment_method_info() {
  $payment_methods = array();

  // Add a new payment method for each available SoftBank payment service.
  foreach (commerce_sbpayment_services() as $machine_name => $sbpayment_service) {
    // Build the commerce payment method machine name.
    $sbpayment_service_method_name = sprintf('%s_%s', COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE, $machine_name);

    // Determine the service name.
    $sbpayment_service_name = !empty($sbpayment_service['name']) ? $sbpayment_service['name'] : $machine_name;

    $payment_methods[$sbpayment_service_method_name] = array(
      'file' => 'includes/' . $sbpayment_service_method_name . '.payment.inc',
      'title' => t('Commerce SoftBank Payment Service: @service_name', array('@service_name' => $sbpayment_service_name)),
      'description' => t('Redirect users to submit payments through the SoftBank Payment Service: @service_name.', array('@service_name' => $sbpayment_service_name)),
      'active' => (commerce_default_currency() === 'JPY'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    );
  }

  return $payment_methods;
}

// TODO: Implement menu hook for CGI notification.

// TODO: Implement custom delivery callback for CGI notification.

/**
 * Get the list of available SoftBank services.
 *
 * @return array
 *   Array of SoftBank services keyed by a unique machine name.
 */
function commerce_sbpayment_services() {
  // TODO: The XML API can be implemented here if required in future.
  return array(
    'link_type' => array(
      'name' => t('Link Type'),
      'class' => \Commerce\SBPayment\Service\LinkType::class,
    ),
  );
}

/**
 * Get the available gateway mode options for use with the Drupal form API.
 *
 * @return string[]
 *   Array of gateway modes keyed by machine name.
 */
function _commerce_sbpayment_mode_options() {
  return array(
    \Commerce\SBPayment\SBPayment::API_MODE_TEST => t('Test'),
    \Commerce\SBPayment\SBPayment::API_MODE_LIVE => t('Live'),
  );
}

/**
 * Get a list of SoftBank payment methods for use with the Drupal form API.
 *
 * @param string[] $payment_methods
 *   List of the available payment method machine names as defined
 *   by Commerce\SBPayment\Payment\Methods.
 *
 * @return string[]
 *   Array of payment method names keyed by machine name.
 */
function _commerce_sbpayment_payment_method_options($payment_methods) {
  // Build an array of payment method names keyed by the machine name. Filtering
  // out any invalid methods.
  $payment_method_options = array_filter(array_map(function ($payment_method) {
    return \Commerce\SBPayment\Payment\Methods::getPaymentMethodByMachineName($payment_method);
  }, $payment_methods));

  // Allow other modules to alter the list of payment methods.
  drupal_alter('commerce_sbpayment_payment_method_options', $payment_method_options);

  return $payment_method_options;
}

// TODO: Add helper for saving transactions.
