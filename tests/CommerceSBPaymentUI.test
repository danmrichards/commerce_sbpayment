<?php

/**
 * @file
 * Contains CommerceSBPaymentUI.
 */

use Commerce\SBPayment\SBPayment;
use Commerce\SBPayment\Util\Util;
use Commerce\SBPayment\Product\LinkTypeProduct;

/**
 * Defines a class for testing the Commerce SoftBank Payment Service UI.
 */
class CommerceSBPaymentUI extends CommerceBaseTestCase {

  /**
   * A custom site name for testing purposes.
   *
   * @var string
   */
  protected $siteName = 'SoftBank Testing';

  /**
   * Dummy commerce product.
   *
   * @var \stdClass
   */
  protected $product;

  /**
   * Admin user account for testing.
   *
   * @var \stdClass
   */
  protected $storeAdmin;

  /**
   * Customer user account for testing.
   *
   * @var \stdClass
   */
  protected $storeCustomer;

  /**
   * Order object.
   *
   * @var \stdClass
   */
  protected $order;

  /**
   * Payment method settings for the link type service.
   *
   * @var array
   */
  protected $linkTypeSettings = array(
    'mode' => 'test',
    'pay_methods' => array(
      'credit' => 'credit',
      'docomo' => 'docomo',
    ),
    'merchant_id' => 'TEST123',
    'service_id' => '001',
    'hash_key' => 't7e06iyq5opmhcf1ekw0',
    'debug' => 0,
  );

  /**
   * Example payment methods keyed by machine name.
   *
   * @var array
   */
  protected $paymentMethods = array(
    'credit' => 'Credit card payment',
    'docomo' => 'Docomo Keitai Barai',
  );

  /**
   * Machine name of the SoftBank service we're testing.
   *
   * @var string
   */
  protected $serviceName = 'link_type';

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce SoftBank Payment Service UI',
      'description' => 'Tests the payment and administrative UI for the Commerce SoftBank Payment Service module.',
      'group' => 'Commerce SoftBank Payment Service',
    );
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Get the list of commerce modules to enable.
    $modules = parent::setUpHelper('all');

    // We don't need the example payment module.
    $key = array_search('commerce_payment_example', $modules);
    if (FALSE !== $key) {
      unset($modules[$key]);
    }

    // Enable the commerce modules.
    parent::setUp($modules);

    // Enable Japanese Yen and US Dollars.
    $this->enableCurrencies(array('JPY', 'USD'));

    // Set the default currency to Japanese Yen.
    variable_set('commerce_default_currency', 'JPY');

    // Enable Commerce SoftBank. Note we're doing this after the other modules
    // and default currency change. This is to ensure the hook_requirements
    // conditions of the module are met.
    $success = module_enable(array('commerce_sbpayment'), TRUE);
    $this->assertTrue($success, t('Enabled the Commerce SoftBank Payment Service module.'));

    // Reset caches.
    $this->resetAll();

    // Set the site name.
    variable_set('site_name', $this->siteName);

    // Set the default country to Japan.
    variable_set('site_default_country', 'JP');

    // User creation for different operations.
    $this->storeAdmin = $this->createStoreAdmin();
    $this->storeCustomer = $this->createStoreCustomer();

    // Create a dummy product.
    $this->product = $this->createDummyProduct('PROD-01', 'Product One', 1000, 'JPY');

    // Create a dummy product with an invalid currency.
    $this->invalidProduct = $this->createDummyProduct('PROD-02', 'Product Two', 100, 'USD');

    // Configure the payment method settings.
    $this->configureSoftBankPaymentMethod('commerce_sbpayment_' . $this->serviceName, $this->linkTypeSettings);
  }

  /**
   * Validate the SoftBank API interaction.
   */
  public function testCommerceSbPaymentApi() {
    // Load the payment method instance.
    $payment_method_id = sprintf('%s_%s', COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE, $this->serviceName);
    $payment_method_instance_id = sprintf('%s|commerce_payment_%s', $payment_method_id, $payment_method_id);
    $sbpayment_method = commerce_payment_method_instance_load($payment_method_instance_id);

    // Get the payment service object.
    $sbpayment_service_machine_name = str_replace(COMMERCE_SBPAYMENT_PAYMENT_METHOD_BASE . '_', '', $this->serviceName);
    $sbpayment_service = commerce_sbpayment_get_service_object($sbpayment_service_machine_name);

    // Set the gateway mode and encryption hash key.
    $sbpayment_service->setMode($this->linkTypeSettings['mode']);
    $sbpayment_service->setHashKey($this->linkTypeSettings['hash_key']);

    // Prepare the data required by the payment service.
    $payment_data = array(
      'pay_method' => 'credit',
      'merchant_id' => $this->linkTypeSettings['merchant_id'],
      'service_id' => $this->linkTypeSettings['service_id'],
      'cust_code' => '1234',
      'order_id' => '2345',
      'item_id' => 2345,
      'item_name' => t('Order @order_number from @site_name', array(
        '@order_number' => '2345',
        '@site_name' => variable_get('site_name', 'Drupal'),
      )),
      'tax' => '',
      'amount' => 100,
      'pay_type' => 0,
      'service_type' => 0,
      'terminal_type' => 0,
      'success_url' => url('checkout/2345/payment/return/example_redirect_key', array('absolute' => TRUE)),
      'cancel_url' => url('checkout/2345/payment/back/example_redirect_key', array('absolute' => TRUE)),
      'error_url' => url('checkout/2345/payment/return/example_redirect_key', array('absolute' => TRUE)),
      'pagecon_url' => url(COMMERCE_SBPAYMENT_BASE_URL . '/' . $this->serviceName . '/2345/example_redirect_key', array('absolute' => TRUE)),
    );

    // Build an array of SoftBank product objects for the current order.
    $sbpayment_products = array();
    $sbpayment_products[] = new LinkTypeProduct(array(
      'dtl_rowno' => 1,
      'dtl_item_id' => 'PROD-01',
      'dtl_item_name' => 'Test Product',
      'dtl_item_count' => 1,
      'dtl_amount' => 'Product One',
    ));

    // Set the payment fields and product on the service.
    $sbpayment_service->setPaymentData($payment_data);
    $sbpayment_service->setProducts($sbpayment_products);

    // Test the the expected checksum is generated.
    $this->assertEqual($this->generateTestChecksum($sbpayment_service, $this->linkTypeSettings['hash_key']), $sbpayment_service->getChecksum(), t('Checksum generation OK.'));
  }

  /**
   * Test payment method administration.
   */
  public function testCommerceSbPaymentAdministration() {
    // Log in as store administrator user.
    $this->drupalLogin($this->storeAdmin);

    // Go to payment methods page.
    $this->drupalGet('admin/commerce/config/payment-methods');

    $this->assertTitle(t('Payment methods | @site_name', array('@site_name' => $this->siteName)), t('We are now in the payment methods page'));
    $this->assertText(t('SoftBank Payment Service'), t('SoftBank Payment rule is present'));

    // Go to edit SoftBank payment rule.
    $this->clickLink(t('SoftBank Payment Service'));

    // Go the enable payment action.
    $this->clickLink(t('Enable payment method: SoftBank Payment Service'));

    // Check the expected fields are on the rule action.
    foreach ($this->linkTypeSettings as $field_name => $value) {
      $field_id = 'edit-parameter-payment-method-settings-payment-method-settings-' . str_replace('_', '-', $field_name);
      $element = is_array($value) ? 'select' : 'input';
      $this->assertFieldByXPath("//{$element}[starts-with(@id, '{$field_id}')]", NULL, t('Payment method field @field_name exists. Tested with ID @id', array('@field_name' => $field_name, '@id' => $field_id)));
    }
  }

  /**
   * Test the payment on checkout process using an authenticated user.
   */
  public function testCommerceSbPaymentCheckoutProcess() {
    // Create a test order for our user and product.
    $this->createOrderAndGoToPayment($this->storeCustomer, array($this->product->product_id => 1));

    // Check the payment pane is present.
    $this->assertText(t('SoftBank Payment Service'), t('SoftBank payment service pane is present'));

    // Check the SoftBank payment options pane is present with all enabled
    // pay method options.
    foreach ($this->linkTypeSettings['pay_methods'] as $pay_method) {
      $this->assertFieldByName('commerce_payment[payment_details][softbank_pay_method]', $pay_method, t('Radio button present for @pay_method', array('@pay_method' => $this->paymentMethods[$pay_method])));
    }

    $pay_method_choice = array(
      'commerce_payment[payment_details][softbank_pay_method]' => 'credit',
    );

    // Finish checkout process. We can't really test past this point as we get
    // redirected off to SoftBank.
    $this->drupalPost(NULL, $pay_method_choice, t('Continue to next step'));
    $this->assertFieldById('edit-submit', t('Proceed to SoftBank'), t('Redirection button to SoftBank is present'));
  }

  /**
   * Test checkout process with an incorrect currency.
   */
  public function testInvalidCurrencyCheckoutProcess() {
    // Create a test order for our user and product.
    $this->createOrderAndGoToPayment($this->storeCustomer, array($this->invalidProduct->product_id => 1));

    // Check the SoftBank payment options pane is not present.
    foreach ($this->linkTypeSettings['pay_methods'] as $pay_method) {
      $this->assertNoFieldByName('commerce_payment[payment_details][softbank_pay_method]', $pay_method, t('Radio button not present for @pay_method', array('@pay_method' => $this->paymentMethods[$pay_method])));
    }

    // Check the error message is present.
    $this->assertText(t('Your order is not in a currency supported by SoftBank. Please contact an administrator.'), t('Invalid currency error is displayed'));
  }

  /**
   * Generate random valid information for Address information.
   */
  protected function generateAddressInformation() {
    $address_info['name_line'] = $this->randomName();
    $address_info['thoroughfare'] = $this->randomName();
    $address_info['locality'] = $this->randomName();
    $address_info['postal_code'] = rand(00000, 99999);
    $address_info['administrative_area'] = '01';

    return $address_info;
  }

  /**
   * Create a dummy order and go to checkout payment page.
   */
  protected function createOrderAndGoToPayment($user = NULL, $products = array()) {
    if (empty($user)) {
      $user = $this->storeCustomer;
    }

    $this->drupalLogin($user);

    // Order creation, in cart status.
    $this->order = $this->createDummyOrder($user->uid, $products);

    // Go to checkout page.
    $this->drupalGet($this->getCommerceUrl('checkout'));

    // Check if the page resolves and if the default panes are present.
    $this->assertResponse(200, t('Store customer user is able to access the checkout page'));
    $this->assertTitle(t('Checkout | @site_name', array('@site_name' => $this->siteName)), t('Checkout page successfully loaded'));

    // Generate random information, as city, postal code, etc.
    $address_info = $this->generateAddressInformation();

    // Fill in the billing address information.
    $billing_pane = $this->xpath("//select[starts-with(@name, 'customer_profile_billing[commerce_customer_address]')]");
    $this->drupalPostAJAX(NULL, array((string) $billing_pane[0]['name'] => 'JP'), (string) $billing_pane[0]['name']);

    // Check if the country has been selected correctly, this uses XPath as the
    // ajax call replaces the element and the id may change.
    $this->assertFieldByXPath("//select[starts-with(@id, 'edit-customer-profile-billing-commerce-customer-address')]//option[@selected='selected']", 'JP', t('Country selected'));

    // Fill in the required information for billing pane, with a random State.
    $info = array(
      'customer_profile_billing[commerce_customer_address][und][0][name_line]' => $address_info['name_line'],
      'customer_profile_billing[commerce_customer_address][und][0][thoroughfare]' => $address_info['thoroughfare'],
      'customer_profile_billing[commerce_customer_address][und][0][locality]' => $address_info['locality'],
      'customer_profile_billing[commerce_customer_address][und][0][administrative_area]' => $address_info['administrative_area'],
      'customer_profile_billing[commerce_customer_address][und][0][postal_code]' => $address_info['postal_code'],
    );
    $this->drupalPost(NULL, $info, t('Continue to next step'));

    // Check for default panes and information in this checkout phase.
    $this->assertTitle(t('Review order | @site_name', array('@site_name' => $this->siteName)), t('Review order page successfully loaded'));
  }

  /**
   * Configure the payment method rule for SoftBank.
   *
   * @param string $payment_method_id
   *   The commerce payment method ID.
   * @param array $settings
   *   Settings for the payment method.
   */
  protected function configureSoftBankPaymentMethod($payment_method_id, $settings = array()) {
    // Load the payment method rule config.
    $rule_config = rules_config_load("commerce_payment_{$payment_method_id}");

    if (!empty($rule_config)) {
      foreach ($rule_config->actions() as $action) {
        if (!empty($action->settings['payment_method']) && "commerce_payment_enable_{$payment_method_id}" === $action->getElementName()) {
          // During initialization of action the "payment_method" key will
          // contain the method ID.
          if (!is_array($action->settings['payment_method'])) {
            $action->settings['payment_method'] = array();
          }

          // Ensure that we have an array in "settings" key.
          $action->settings['payment_method'] += array('settings' => array());

          // Set the payment method ID.
          $action->settings['payment_method']['method_id'] = $payment_method_id;

          // Override any supplied payment method settings.
          $action->settings['payment_method']['settings'] = array_merge($action->settings['payment_method']['settings'], $settings);
        }
      }

      $rule_config->save();
    }
  }

  /**
   * Generate a test checksum based on payment and product data.
   *
   * @param \Commerce\SBPayment\SBPayment $sbpayment_service
   *   The payment service object with payment data set.
   * @param string $hash_key
   *   Hash key assigned by SoftBank for the merchant account.
   *
   * @return string
   *   The generated hashkey.
   */
  protected function generateTestChecksum(SBPayment $sbpayment_service, $hash_key) {
    $checksum_data = $sbpayment_service->getPaymentData();

    // Append the data for each product.
    $i = 1;
    foreach ($sbpayment_service->getProducts() as $product) {
      foreach ($product->toArray() as $product_field => $product_data) {
        $checksum_data[$product_field . '__' . $i] = $product_data;
      }
      ++$i;
    }

    // Add the final details.
    $checksum_data['request_date'] = $sbpayment_service->getRequestDate();
    $checksum_data['limit_second'] = $sbpayment_service->getLimitSecond();

    // Generate the hash code.
    return Util::generateSpsHashcode($checksum_data, $hash_key);
  }

}
