<?php

/**
 * @file
 * Contains CommerceSBPaymentUI.
 */

/**
 * Defines a class for testing the Commerce SoftBank Payment Service UI.
 */
class CommerceSBPaymentUI extends CommerceBaseTestCase {

  /**
   * {@inheritdoc}
   */
  public static function getInfo() {
    return array(
      'name' => 'Commerce SoftBank Payment Service UI',
      'description' => 'Tests the payment and administrative UI for the Commerce SoftBank Payment Service module.',
      'group' => 'Commerce SoftBank Payment Service',
    );
  }

  /**
   * {@inheritdoc}
   */
  protected function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_sbpayment'));
    parent::setUp($modules);

    // User creation for different operations.
    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();
  }

  /**
   * Create a dummy order and go to checkout payment page.
   */
  protected function createOrderAndGoToPayment($user = NULL, $products = array()) {
    if (empty($user)) {
      $user = $this->store_customer;
    }

    // Log in as normal user.
    $this->drupalLogin($user);

    // Order creation, in cart status.
    $this->order = $this->createDummyOrder($user->uid, $products);

    // Go to checkout page.
    $this->drupalGet($this->getCommerceUrl('checkout'));

    // Check if the page resolves and if the default panes are present.
    $this->assertResponse(200, t('Store customer user is able to access the checkout page'));
    $this->assertTitle(t('Checkout') . ' | Drupal', t('Checkout page successfully loaded'));

    // Generate random information, as city, postal code, etc.
    $address_info = $this->generateAddressInformation();

    // Fill in the billing address information.
    $billing_pane = $this->xpath("//select[starts-with(@name, 'customer_profile_billing[commerce_customer_address]')]");
    $this->drupalPostAJAX(NULL, array((string) $billing_pane[0]['name'] => 'US'), (string) $billing_pane[0]['name']);

    // Check if the country has been selected correctly, this uses XPath as the
    // ajax call replaces the element and the id may change.
    $this->assertFieldByXPath("//select[starts-with(@id, 'edit-customer-profile-billing-commerce-customer-address')]//option[@selected='selected']", 'US', t('Country selected'));

    // Fill in the required information for billing pane, with a random State.
    $info = array(
      'customer_profile_billing[commerce_customer_address][und][0][name_line]' => $address_info['name_line'],
      'customer_profile_billing[commerce_customer_address][und][0][thoroughfare]' => $address_info['thoroughfare'],
      'customer_profile_billing[commerce_customer_address][und][0][locality]' => $address_info['locality'],
      'customer_profile_billing[commerce_customer_address][und][0][administrative_area]' => $address_info['administrative_area'],
      'customer_profile_billing[commerce_customer_address][und][0][postal_code]' => $address_info['postal_code'],
    );
    $this->drupalPost(NULL, $info, t('Continue to next step'));

    // Check for default panes and information in this checkout phase.
    $this->assertTitle(t('Review order') . ' | Drupal', t('Review order page successfully loaded'));
  }

  // TODO: Test payment method administration.

  // TODO: Test checkout process with correct and incorrect default currencies.

  // TODO: Test checkout process for authenticated users.

  // TODO: Test checkout process for anonymous users.
}
